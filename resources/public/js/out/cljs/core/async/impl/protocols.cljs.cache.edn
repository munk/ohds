;; Analyzed by ClojureScript 0.0-3058
{:defs {remove! {:protocol-inline nil, :meta {:arglists (quote ([b])), :protocol cljs.core.async.impl.protocols/Buffer, :end-column 11, :end-line 31, :column 4, :line 31, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/remove!, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 11, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b])), :test true}, close! {:protocol-inline nil, :meta {:arglists (quote ([chan])), :protocol cljs.core.async.impl.protocols/Channel, :end-column 10, :end-line 21, :column 4, :line 21, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/Channel, :name cljs.core.async.impl.protocols/close!, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 10, :method-params ([chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 20, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chan])), :test true}, Handler {:meta {:protocol-info {:methods {active? [[h]], commit [[h]]}}, :protocol-symbol true, :end-column 21, :end-line 24, :column 14, :line 24, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol-symbol true, :name cljs.core.async.impl.protocols/Handler, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 21, :column 1, :line 24, :protocol-info {:methods {active? [[h]], commit [[h]]}}, :info nil, :end-line 24, :impls #{}, :test true}, active? {:protocol-inline nil, :meta {:arglists (quote ([h])), :protocol cljs.core.async.impl.protocols/Handler, :end-column 11, :end-line 25, :column 4, :line 25, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/Handler, :name cljs.core.async.impl.protocols/active?, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 11, :method-params ([h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 24, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([h])), :test true}, Buffer {:meta {:protocol-info {:methods {full? [[b]], remove! [[b]], add!* [[b itm]]}}, :protocol-symbol true, :end-column 20, :end-line 29, :column 14, :line 29, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol-symbol true, :name cljs.core.async.impl.protocols/Buffer, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 20, :column 1, :line 29, :protocol-info {:methods {full? [[b]], remove! [[b]], add!* [[b itm]]}}, :info nil, :end-line 29, :impls #{}, :test true}, full? {:protocol-inline nil, :meta {:arglists (quote ([b])), :protocol cljs.core.async.impl.protocols/Buffer, :end-column 9, :end-line 30, :column 4, :line 30, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/full?, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 9, :method-params ([b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([b])), :test true}, add! {:protocol-inline nil, :meta {:arglists (quote ([b] [b itm])), :end-column 11, :end-line 34, :column 7, :line 34, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :name cljs.core.async.impl.protocols/add!, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 11, :method-params ([b] [b itm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b] [b itm])), :test true}, add!* {:protocol-inline nil, :meta {:arglists (quote ([b itm])), :protocol cljs.core.async.impl.protocols/Buffer, :end-column 9, :end-line 32, :column 4, :line 32, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/Buffer, :name cljs.core.async.impl.protocols/add!*, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 9, :method-params ([b itm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 29, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([b itm])), :test true}, ReadPort {:meta {:protocol-info {:methods {take! [[port fn1-handler]]}}, :protocol-symbol true, :end-column 22, :end-line 13, :column 14, :line 13, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol-symbol true, :name cljs.core.async.impl.protocols/ReadPort, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 22, :column 1, :line 13, :protocol-info {:methods {take! [[port fn1-handler]]}}, :info nil, :end-line 13, :impls #{}, :test true}, Channel {:meta {:protocol-info {:methods {close! [[chan]], closed? [[chan]]}}, :protocol-symbol true, :end-column 21, :end-line 20, :column 14, :line 20, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol-symbol true, :name cljs.core.async.impl.protocols/Channel, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 21, :column 1, :line 20, :protocol-info {:methods {close! [[chan]], closed? [[chan]]}}, :info nil, :end-line 20, :impls #{}, :test true}, closed? {:protocol-inline nil, :meta {:arglists (quote ([chan])), :protocol cljs.core.async.impl.protocols/Channel, :end-column 11, :end-line 22, :column 4, :line 22, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/Channel, :name cljs.core.async.impl.protocols/closed?, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 11, :method-params ([chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 20, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([chan])), :test true}, UnblockingBuffer {:meta {:protocol-info {:methods {}}, :protocol-symbol true, :end-column 30, :end-line 41, :column 14, :line 41, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol-symbol true, :name cljs.core.async.impl.protocols/UnblockingBuffer, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 30, :column 1, :line 41, :protocol-info {:methods {}}, :info nil, :end-line 41, :impls #{}, :test true}, MAX-QUEUE-SIZE {:meta {:const true, :end-column 28, :end-line 11, :column 14, :line 11, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :line 11, :column 1, :end-line 11, :end-column 28, :const true, :test true, :name cljs.core.async.impl.protocols/MAX-QUEUE-SIZE}, commit {:protocol-inline nil, :meta {:arglists (quote ([h])), :protocol cljs.core.async.impl.protocols/Handler, :end-column 10, :end-line 27, :column 4, :line 27, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/Handler, :name cljs.core.async.impl.protocols/commit, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 10, :method-params ([h]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 24, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([h])), :test true}, put! {:protocol-inline nil, :meta {:arglists (quote ([port val fn1-handler])), :protocol cljs.core.async.impl.protocols/WritePort, :end-column 8, :end-line 17, :column 4, :line 17, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/WritePort, :name cljs.core.async.impl.protocols/put!, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 8, :method-params ([port val fn1-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 16, :end-line 17, :max-fixed-arity 3, :fn-var true, :arglists (quote ([port val fn1-handler])), :test true}, take! {:protocol-inline nil, :meta {:arglists (quote ([port fn1-handler])), :protocol cljs.core.async.impl.protocols/ReadPort, :end-column 9, :end-line 14, :column 4, :line 14, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol cljs.core.async.impl.protocols/ReadPort, :name cljs.core.async.impl.protocols/take!, :variadic false, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 9, :method-params ([port fn1-handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 13, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([port fn1-handler])), :test true}, WritePort {:meta {:protocol-info {:methods {put! [[port val fn1-handler]]}}, :protocol-symbol true, :end-column 23, :end-line 16, :column 14, :line 16, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/core/async/impl/protocols.cljs"}, :protocol-symbol true, :name cljs.core.async.impl.protocols/WritePort, :file "resources/public/js/out/cljs/core/async/impl/protocols.cljs", :end-column 23, :column 1, :line 16, :protocol-info {:methods {put! [[port val fn1-handler]]}}, :info nil, :end-line 16, :impls #{}, :test true}}, :imports nil, :requires nil, :uses nil, :require-macros nil, :use-macros nil, :excludes #{}, :doc nil, :name cljs.core.async.impl.protocols}