;; Analyzed by ClojureScript 0.0-3058
{:use-macros nil, :excludes #{}, :macros {doc {:ns cljs.repl, :name cljs.repl/doc, :file "cljs/repl.clj", :column 1, :line 964, :macro true, :arglists ([name]), :doc "Prints documentation for a var or special form given its name"}, find-doc {:ns cljs.repl, :name cljs.repl/find-doc, :file "cljs/repl.clj", :column 1, :line 990, :macro true, :arglists ([re-string-or-pattern]), :doc "Prints documentation for any var whose documentation or name\n contains a match for re-string-or-pattern"}, dir {:ns cljs.repl, :name cljs.repl/dir, :file "cljs/repl.clj", :column 1, :line 1072, :macro true, :arglists ([ns]), :doc "Prints a sorted directory of public vars in a namespace"}, pst {:ns cljs.repl, :name cljs.repl/pst, :file "cljs/repl.clj", :column 1, :line 1078, :macro true, :arglists ([] [e])}, source {:ns cljs.repl, :name cljs.repl/source, :file "cljs/repl.clj", :column 1, :line 1046, :macro true, :arglists ([n]), :doc "Prints the source code for the given symbol, if it can find it.\n  This requires that the symbol resolve to a Var defined in a\n  namespace for which the .cljs is in the classpath.\n\n  Example: (source filter)"}, apropos {:ns cljs.repl, :name cljs.repl/apropos, :file "cljs/repl.clj", :column 1, :line 1055, :macro true, :arglists ([str-or-pattern]), :doc "Given a regular expression or stringable thing, return a seq of all\npublic definitions in all currently-loaded namespaces that match the\nstr-or-pattern."}}, :name cljs.repl, :imports nil, :requires nil, :uses nil, :defs {print-doc {:protocol-inline nil, :meta {:arglists (quote ([m])), :end-column 16, :end-line 12, :column 7, :line 12, :file "/Users/jdowns/ohds/resources/public/js/out/cljs/repl.cljs"}, :name cljs.repl/print-doc, :variadic false, :file "resources/public/js/out/cljs/repl.cljs", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}}, :require-macros {cljs.repl cljs.repl}, :cljs.analyzer/constants {:order [:ns :name :forms :arglists :macro :repl-special-function :special-form :doc :url], :seen #{:ns :name :special-form :repl-special-function :macro :url :arglists :doc :forms}}, :doc nil}