;; Analyzed by ClojureScript 0.0-3058
{:use-macros {go cljs.core.async.macros}, :excludes #{get}, :name cljs-http.client, :imports nil, :requires {uri goog.Uri, cljs-http.core cljs-http.core, async cljs.core.async, no.en.core no.en.core, goog.Uri goog.Uri, cljs-http.util cljs-http.util, cljs.core.async cljs.core.async, util cljs-http.util, clojure.string clojure.string, cljs.reader cljs.reader, core cljs-http.core}, :uses {url-decode no.en.core, <! cljs.core.async, join clojure.string, close! cljs.core.async, chan cljs.core.async, url-encode no.en.core, read-string cljs.reader, split clojure.string, put! cljs.core.async, blank? clojure.string}, :defs {options {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 325, :column 7, :end-line 325, :end-column 14, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/options, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 14, :method-params ([url p__9653]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, encode-val {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 44, :column 8, :end-line 44, :end-column 18, :private true, :arglists (quote ([k v]))}, :private true, :name cljs-http.client/encode-val, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 18, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any}), :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v])), :test true}, put {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 340, :column 7, :end-line 340, :end-column 10, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/put, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 10, :method-params ([url p__9662]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, parse-query-params {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 15, :column 7, :end-line 15, :end-column 25, :arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map."}, :name cljs-http.client/parse-query-params, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 25, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any clj-nil}}), :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Parse `s` as query params and return a hash map.", :test true}, wrap-accept {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 113, :column 7, :end-line 113, :end-column 18, :arglists (quote ([client & [accept]]))}, :name cljs-http.client/wrap-accept, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 18, :method-params ([client p__9592]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag function}), :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client & [accept]])), :test true}, wrap-content-type {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 120, :column 7, :end-line 120, :end-column 24, :arglists (quote ([client & [content-type]]))}, :name cljs-http.client/wrap-content-type, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 24, :method-params ([client p__9595]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag function}), :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client & [content-type]])), :test true}, wrap-edn-params {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 86, :column 7, :end-line 86, :end-column 22, :arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header."}, :name cljs-http.client/wrap-edn-params, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 22, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :edn-params in the `request` :body and set the appropriate\n  Content Type header.", :test true}, wrap-form-params {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 192, :column 7, :end-line 192, :end-column 23, :arglists (quote ([client]))}, :name cljs-http.client/wrap-form-params, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, wrap-basic-auth {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 236, :column 7, :end-line 236, :end-column 22, :arglists (quote ([client & [credentials]])), :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header."}, :name cljs-http.client/wrap-basic-auth, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 22, :method-params ([client p__9635]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag function}), :line 236, :end-line 236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client & [credentials]])), :doc "Middleware converting the :basic-auth option or `credentials` into\n  an Authorization header.", :test true}, wrap-request {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 266, :column 7, :end-line 266, :end-column 19, :arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/request"}, :name cljs-http.client/wrap-request, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 19, :method-params ([request]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 266, :end-line 266, :max-fixed-arity 1, :fn-var true, :arglists (quote ([request])), :doc "Returns a batteries-included HTTP request function coresponding to the given\n   core client. See client/request", :test true}, encode-param {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 53, :column 8, :end-line 53, :end-column 20, :private true, :arglists (quote ([[k v]]))}, :private true, :name cljs-http.client/encode-param, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 20, :method-params ([p__9584]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[k v]])), :test true}, request {:name cljs-http.client/request, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 289, :column 1, :end-line 298, :end-column 10, :doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params", :test true, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 298, :column 3, :end-line 298, :end-column 10, :doc "Executes the HTTP request corresponding to the given map and returns the\n   response map for corresponding to the resulting HTTP response.\n\n   In addition to the standard Ring request keys, the following keys are also\n   recognized:\n   * :url\n   * :method\n   * :query-params"}}, get {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 305, :column 7, :end-line 305, :end-column 10, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/get, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 10, :method-params ([url p__9641]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, jsonp {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 315, :column 7, :end-line 315, :end-column 12, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/jsonp, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 12, :method-params ([url p__9647]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, patch {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 330, :column 7, :end-line 330, :end-column 12, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/patch, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 12, :method-params ([url p__9656]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, decode-body {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 76, :column 7, :end-line 76, :end-column 18, :arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches."}, :name cljs-http.client/decode-body, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 18, :method-params ([response decode-fn content-type request-method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 4, :variadic false, :tag #{nil clj}}), :line 76, :end-line 76, :max-fixed-arity 4, :fn-var true, :arglists (quote ([response decode-fn content-type request-method])), :doc "Decocde the :body of `response` with `decode-fn` if the content type matches.", :test true}, wrap-json-response {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 177, :column 7, :end-line 177, :end-column 25, :arglists (quote ([client])), :doc "Decode application/json responses."}, :name cljs-http.client/wrap-json-response, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 25, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/json responses.", :test true}, wrap-transit-response {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 153, :column 7, :end-line 153, :end-column 28, :arglists (quote ([client])), :doc "Decode application/transit+json responses."}, :name cljs-http.client/wrap-transit-response, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 28, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/transit+json responses.", :test true}, wrap-edn-response {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 99, :column 7, :end-line 99, :end-column 24, :arglists (quote ([client])), :doc "Decode application/edn responses."}, :name cljs-http.client/wrap-edn-response, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Decode application/edn responses.", :test true}, generate-form-data {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 202, :column 7, :end-line 202, :end-column 25, :arglists (quote ([params]))}, :name cljs-http.client/generate-form-data, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 25, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag js/FormData}), :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :test true}, move {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 320, :column 7, :end-line 320, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/move, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 11, :method-params ([url p__9650]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 320, :end-line 320, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, wrap-default-headers {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 106, :column 7, :end-line 106, :end-column 27, :arglists (quote ([client & [default-headers]]))}, :name cljs-http.client/wrap-default-headers, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 27, :method-params ([client p__9589]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag function}), :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client & [default-headers]])), :test true}, delete {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 300, :column 7, :end-line 300, :end-column 13, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/delete, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 13, :method-params ([url p__9638]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, wrap-json-params {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 164, :column 7, :end-line 164, :end-column 23, :arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header."}, :name cljs-http.client/wrap-json-params, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 23, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :json-params in the `request` :body and set the appropriate\n  Content Type header.", :test true}, wrap-channel-from-request-map {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 257, :column 7, :end-line 257, :end-column 36, :arglists (quote ([client])), :doc "Pipe the response-channel into the request-map's\n   custom channel (e.g. to enable transducers)"}, :name cljs-http.client/wrap-channel-from-request-map, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 36, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Pipe the response-channel into the request-map's\n   custom channel (e.g. to enable transducers)", :test true}, parse-url {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 26, :column 7, :end-line 26, :end-column 16, :arglists (quote ([url])), :doc "Parse `url` into a hash map."}, :name cljs-http.client/parse-url, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 16, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{cljs.core/IMap clj-nil}}), :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :doc "Parse `url` into a hash map.", :test true}, wrap-url {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 228, :column 7, :end-line 228, :end-column 15, :arglists (quote ([client]))}, :name cljs-http.client/wrap-url, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 15, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, if-pos {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([v]))}, :name cljs-http.client/if-pos, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 13, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil clj-nil}}), :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :test true}, default-transit-opts {:name cljs-http.client/default-transit-opts, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 127, :column 1, :end-line 127, :end-column 43, :private true, :test true, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 127, :column 23, :end-line 127, :end-column 43, :private true}}, head {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 310, :column 7, :end-line 310, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/head, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 11, :method-params ([url p__9644]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 310, :end-line 310, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, regex-char-esc-smap {:name cljs-http.client/regex-char-esc-smap, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 64, :column 1, :end-line 64, :end-column 25, :test true, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 64, :column 6, :end-line 64, :end-column 25}}, wrap-server-name {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 225, :column 7, :end-line 225, :end-column 23, :arglists (quote ([client server-name]))}, :name cljs-http.client/wrap-server-name, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 23, :method-params ([client server-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag function}), :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([client server-name])), :test true}, wrap-method {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 218, :column 7, :end-line 218, :end-column 18, :arglists (quote ([client]))}, :name cljs-http.client/wrap-method, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 18, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, wrap-multipart-params {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 210, :column 7, :end-line 210, :end-column 28, :arglists (quote ([client]))}, :name cljs-http.client/wrap-multipart-params, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 28, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}, escape-special {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 69, :column 7, :end-line 69, :end-column 21, :arglists (quote ([string])), :doc "Escape special characters -- for content-type."}, :name cljs-http.client/escape-special, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 21, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :doc "Escape special characters -- for content-type.", :test true}, generate-query-string {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 58, :column 7, :end-line 58, :end-column 28, :arglists (quote ([params]))}, :name cljs-http.client/generate-query-string, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 28, :method-params ([params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([params])), :test true}, encode-vals {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 47, :column 8, :end-line 47, :end-column 19, :private true, :arglists (quote ([k vs]))}, :private true, :name cljs-http.client/encode-vals, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 19, :method-params ([k vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag any}), :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k vs])), :test true}, post {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 335, :column 7, :end-line 335, :end-column 11, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate."}, :name cljs-http.client/post, :variadic true, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 11, :method-params ([url p__9659]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url & [req]])), :doc "Like #'request, but sets the :method and :url as appropriate.", :test true}, wrap-transit-params {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 131, :column 7, :end-line 131, :end-column 26, :arglists (quote ([client])), :doc "Encode :transit-params in the `request` :body and set the appropriate\n  Content Type header.\n\n  A :transit-opts map can be optionally provided with the following keys:\n\n  :encoding                #{:json, :json-verbose}\n  :decoding                #{:json, :json-verbose}\n  :encoding/decoding-opts  appropriate map of options to be passed to\n                           transit writer/reader, respectively."}, :name cljs-http.client/wrap-transit-params, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 26, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Encode :transit-params in the `request` :body and set the appropriate\n  Content Type header.\n\n  A :transit-opts map can be optionally provided with the following keys:\n\n  :encoding                #{:json, :json-verbose}\n  :decoding                #{:json, :json-verbose}\n  :encoding/decoding-opts  appropriate map of options to be passed to\n                           transit writer/reader, respectively.", :test true}, unexceptional-status? {:name cljs-http.client/unexceptional-status?, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 41, :column 1, :end-line 41, :end-column 27, :test true, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 41, :column 6, :end-line 41, :end-column 27}}, wrap-oauth {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 247, :column 7, :end-line 247, :end-column 17, :arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header."}, :name cljs-http.client/wrap-oauth, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 17, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :doc "Middleware converting the :oauth-token option into an Authorization header.", :test true}, wrap-query-params {:protocol-inline nil, :meta {:file "jar:file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :line 184, :column 7, :end-line 184, :end-column 24, :arglists (quote ([client]))}, :name cljs-http.client/wrap-query-params, :variadic false, :file "file:/Users/jdowns/.m2/repository/cljs-http/cljs-http/0.1.37/cljs-http-0.1.37.jar!/cljs_http/client.cljs", :end-column 24, :method-params ([client]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag function}), :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([client])), :test true}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:encoding :get :json-params :jsonp :patch :transit-params :method :encoding-opts :move :channel :delete :headers :server-port :head :default-headers :form-params :status :decoding-opts :url :query-params :content-type :oauth-token :post :options :uri :decoding :server-name :put :json :transit-opts :query-string :body :edn-params :basic-auth :multipart-params :scheme :request-method :accept}, :order [:scheme :server-name :server-port :uri :query-string :query-params :head :status :headers :body :edn-params :request-method :default-headers :accept :content-type :encoding :encoding-opts :decoding :decoding-opts :json :transit-params :transit-opts :json-params :form-params :patch :delete :post :put :multipart-params :method :url :basic-auth :oauth-token :channel :get :jsonp :move :options]}, :doc nil}