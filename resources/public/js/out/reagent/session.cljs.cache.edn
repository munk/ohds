;; Analyzed by ClojureScript 0.0-3058
{:name reagent.session, :doc nil, :excludes #{get reset! swap! get-in}, :use-macros nil, :require-macros nil, :uses {atom reagent.core}, :requires {reagent reagent.core, reagent.core reagent.core}, :imports nil, :defs {assoc-in! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([ks v])), :doc "Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."}, :name reagent.session/assoc-in!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 16, :method-params ([ks v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{nil any}}), :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ks v])), :doc "Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.", :test true}, remove! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 35, :column 7, :end-line 35, :end-column 14, :arglists (quote ([k])), :doc "Remove a key from the session"}, :name reagent.session/remove!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 14, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag #{nil any}}), :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Remove a key from the session", :test true}, update-in! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 63, :column 7, :end-line 63, :end-column 17, :arglists (quote ([ks f & args])), :doc "'Updates' a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created."}, :name reagent.session/update-in!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 17, :method-params ([ks f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic true, :tag #{nil any}}), :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ks f & args])), :doc "'Updates' a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.", :test true}, get-in! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 55, :column 7, :end-line 55, :end-column 14, :arglists (quote ([ks & [default]])), :doc "Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session."}, :name reagent.session/get-in!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 14, :method-params ([ks p__32304]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks & [default]])), :doc "Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.", :test true}, get {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 7, :column 7, :end-line 7, :end-column 10, :arglists (quote ([k & [default]])), :doc "Get the key's value from the session, returns nil if it doesn't exist."}, :name reagent.session/get, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 10, :method-params ([k p__32286]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag #{nil any}}), :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k & [default]])), :doc "Get the key's value from the session, returns nil if it doesn't exist.", :test true}, reset! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 32, :column 7, :end-line 32, :end-column 13, :arglists (quote ([m]))}, :name reagent.session/reset!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic false, :tag any}), :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, get! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 48, :column 7, :end-line 48, :end-column 11, :arglists (quote ([k & [default]])), :doc "Destructive get from the session. This returns the current value of the key\n  and then removes it from the session."}, :name reagent.session/get!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 11, :method-params ([k p__32299]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag #{nil any}}), :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k & [default]])), :doc "Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.", :test true}, state {:name reagent.session/state, :file "resources/public/js/out/reagent/session.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :test true, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 5, :column 6, :end-line 5, :end-column 11}}, swap! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 21, :column 7, :end-line 21, :end-column 12, :arglists (quote ([f & args])), :doc "Replace the current session's value with the result of executing f with\n  the current value and args."}, :name reagent.session/swap!, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 12, :method-params ([f args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f & args])), :doc "Replace the current session's value with the result of executing f with\n  the current value and args.", :test true}, clear! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 27, :column 7, :end-line 27, :end-column 13, :arglists (quote ([])), :doc "Remove all data from the session and start over cleanly."}, :name reagent.session/clear!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 0, :variadic false, :tag any}), :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Remove all data from the session and start over cleanly.", :test true}, put! {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([k v]))}, :name reagent.session/put!, :variadic false, :file "resources/public/js/out/reagent/session.cljs", :end-column 11, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 2, :variadic false, :tag #{nil any}}), :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v])), :test true}, get-in {:protocol-inline nil, :meta {:file "/Users/jdowns/ohds/resources/public/js/out/reagent/session.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([ks & [default]])), :doc "Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist."}, :name reagent.session/get-in, :variadic true, :file "resources/public/js/out/reagent/session.cljs", :end-column 13, :method-params ([ks p__32291]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:max-fixed-arity 1, :variadic true, :tag any}), :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks & [default]])), :doc "Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.", :test true}}}